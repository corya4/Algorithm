1. C언어를 기반으로 만들어진 객체지향언어.

2. 실행파일 전 자바의 .class 파일처럼 .obj로 변환.

3. 컴파일 전에 처리하기 위한 #이라는 '전처리기' 지시어 사용. (import 비슷)

4. '표준 라이브러리'에 있는 변수나 함수가 'std'네임스페이스에 포함되어 있다. //사용ex -> (std::[메소드이름]) 

5. using과 #include 는 작성된 파일에서 작성된 파일에서 사용하기 위함은 같지만,
   using은 네임스페이스에서만 사용하기 위함이고,
   #include는 해당파일을 작성된 파일에 붙혀넣기 형식이다.
   
6. #defind 라는 매크로 지시자를 사용. 단순 치환.
   
   6-1. 매크로 상수 
        ex) #defind Lucky 7 // 'Lucky'라는 변수를 7이라고 표현[값을 담는게 아님]. 즉 상수
        
   6-2. 매크로 함수
        ex) #defind SWAP(x, y) { int z;
                                 z = x;
                                 x = y;
                                 y = z;
                               }
        
        int a = 4;
        int b = 7;
        SWAP(a, b);
        
        라고 작성시 메소드 호출이 아니라, 중괄호 안의 코드가 SWAP() 코드와 치환되는 것.
        즉,
        
        int a = 4;
        int b = 7;
        int z;
        z = a;
        a = b;
        b = a;
        
        로 컴파일된다.
        
  6-3. #defind 함수에서 파라메터를 문자열 그대로 가져오고 싶은 경우, 변수에 #을 붙힌다.
       ex) #defind ADD(x){ printf(#x "=d%", x);}
           ADD(5+3);
       
       으로 출력시, [5+3=8] 이라고 표현된다.
       
       
7. 포인터와 레퍼런스.
   -포인터를 가르키는 지시자 *
   -레퍼런스를 가르키는 지시자 &
   
   값의 주소를 담는 개념은 같지만, 두가지 차이점이 있다.
   
   7-1. NULL 허용 여부
        포인터는 NULL을 허용함. 그로인한 'null pointer exception' 예외처리가 필수적임.
        레퍼런스는 NULL을 허용하지 않음. 위 포인터 에러를 방지하기 위해 고안되었다고 생각.
        
   7-2. 참조 대상 할당
        
        ex) int a = 10;
            int *p = &a; // 포인터 변수에 주소값 할당.
            int &z = a; // 레퍼런스 변수에 대상을 직접 할당.
            
        레퍼런스는 데이터 변수를 직접 할당받게 되는 점, 그리고 선언과 동시에 초기화 하지 않으면 컴파일 에러가 나는 점에서
        포인터와 다른 모습을 보여준다.
        "Use references when you can, and pointers when you have to"

   7-3. 참조 대상 접근
        레퍼런스는 주소값이 담김과 동시에 해당 주소값의 데이터도 바로 접근이 가능하다. (데이터 변경시 참조 데이터도 변경 //자바와 동일)
        포인터는 순수 주소값만이 담기는 구조다. 그래서 포인터에 담긴 주소값의 데이터에 접근하기 위해서는
        '[포인터변수]->[접근데이터]' 이라는 키워드를 사용한다. (레퍼런서는 [레퍼런스변수].[접근데이터] //자바와 동일)

8. main 메소드.
   C++는 JAVA, C#과는 다르게 패키지(네임스페이스)안의 클래스안에 main메소드를 넣지않고,
   main메소드 선언만으로 실행이 가능하다. 대신 제약이 있는데 사용될 변수나 함수등이 main메소드 위에 선언되어 있어야 한다.
   (그렇지 않으면 식별자 에러 발생)
   #includ 등 전처리기가 활발하게 쓰이는 이유중 하나.
   
   






참고사이트 : https://gracefulprograming.tistory.com/11
        
