1. C# 특징
  1-1. C++과 VB라이브러리 JAVA의 독립적 플랫폼을 합친 형태.
  수 많은 라이브러리 덕분에 쉽고 빠르게 프로그래밍이 가능하고 다른 언어와 호환성이 좋다.
  개발 환경과 실행환경을 통일시키는 것으로 VB.NET, C++.NET등 모두 사용 가능.(자바와 비슷한 가상머신 추정)
 
 
2. C# 장점
  2-1. 뛰어난 생산성.
  많은 라이브러리와 IDE가 프로그래머를 손쉽게 코딩 할 수 있도록 도와준다.
  
  2-2. 입문자에게 흥미를 꺠우쳐 줄 수 있음.
  쉬운 생산성을 통해, 프로그래밍의 재미를 느끼게 해준다.
  
  2-3. 엄격한 문법.
  사소한 실수부터 모든지 컴파일 에러를 띄워주기 때문에, 암묵적 에러를 방지 할 수 있다.
  
  2-4. 완벽한 프로그래밍(?)
  C#에서 전역변수나 전역함수는 상상도 할 수 없다. 모든 변수와 함수를 클래스에 넣어야 함.
  
  2-5. 메모리 관리.
  할당된 메로리를 해제하지 않아도 되며, 사용된 객체는 저절로 제거된다.(JAVA의 가바지컬렉션)
  
  
3. C# 단점
  3-1 속도.
  많은 라이브러리를 가지고 있으므로 C나 C++의 속도에는 미치지 못함.
  
  
================================================================================================


1. 기본 문법
  
   1-1. namespace
   JAVA의 패키지 개념으로 생각중. 다른 개발자의 코드나, 라이브러리를 사용 할 시, 만들어 놓은 클래스와 이름이 겹칠때,
   namespace로 구분 지어서 사용 가능.
   
   1-2. using
   여러 범위로 사용이 가능하다.
   먼저 namespace가 다중으로 존재 할 시, 사용 할 namespace의 경로를 패스해서 코드를 간결하게 만들어 줄 수 있다.
   (실행중인 메인클래스안에 해당 클래스가 존재하지 않을 시)
   using은 namespace 의 경로를 설정하는 구문이다. 즉, using을 변수로써, 해당 경로의 클래스를 메모리에 담을 수 있다.
   또한 리소스를 정리 할 수 있는 메소드를 불러주기 때문에 예외처리상황도 간단하게 가능 할 것 같다.
   
   1-3. cs
   확장자는 .cs로 사용한다.

   1-4. 자료형 타입의 NULL
   보통 정수나 날짜 타입은 NULL값을 가질 수 없으나 C#에서는 NUllable Type이라고 NULL값을 대입 할 수 있음.
   물음표를 타입 뒤에 붙이면 됨. Nullalbe Type을 다시 변환하기 위해서는 .Value 속성(메소드)를 사용함.
   
   ex) 
   int ? i = null;
   
   ex2)
   Nullable<int> j = null;
   j = 10;
   int k = j.Value;
   
   
   1-4. 배열
   배열 선언은 JAVA와 비슷함.
   신기한 점은 32차 배열까지 가질 수 있다고 함.
   
   ex)
   type[ , ,  ....  ,] name; 
   
   
   
   1-5. 변수 및 상수
   선언은 C와 비슷하다고 함.
   상수임을 명시하기 위해서 const 키워드 사용.
   
   1-6. 연산자
   타 언어와 거의 다른 것이 없음.
   특이한 점은 ?? 연산자 인데, 앞의 값이 NULL인 경우 뒤쪽의 피연산자 값을 리턴함.
   
   ex)
   int ? x = null;
   int i = x ?? 0;
   
   
   1-6. 조건문&반복문
   조건문도 다른 언어와 비슷함.
   다른 점은 C#에는 foreach문이 존재함.
   
   자바의 향상된 for문과 거의 동일함.
   
   ex)
   String[] array = new String[] {"AB", "CD", "EF"};
   foreach(String a in array){
      System.Console.WriteLine(s);
   }
   
   
   1-7. 예외처리
   다른 언어와 동일하게 try-catch-finally, throw등이 있음.
   


●재그 배열 - 2차원 이상의 배열에서 각 방향의 요소 수가 일정하지 않은 배열
ex)
int [][]a=new int[3][];
a[0]=new int[3]{1, 2, 3};
a[1]=new int[2]{4, 5};
a[2]=new int[1]{6};


int [][]a=new int[][]{
      new int[]{1, 2, 3}.
      new int[]{4, 5},
      new int[]{6}
};


●속성 - 객체 안에 있는 필드의 값을 취득 또는 설정하는 메서드이다. 필드를 반환하는 get엑세서와 필드에 값을 대입하는 set엑세서로 구성된다. 자바에서 setter, getter랑 비슷한 개념이다
ex)
usting System;
class A{
    public int a;
    public int sok{
          get{
          return a;
          }
          set{
          a=value;
          }
      }
}


●기본 클래스의 생성자를 호출
- 상속한 생성자에 인수가 있는 경우에는 다음과 같이 base를 이용하여 상속원본에 인수를 전달
ex)
using System;
class A{
   public int x;
   public A(int a, int b){
       x=a+b;
   }
]
class B : A{
   public B(int c, int d) : base(c, d){}
}

